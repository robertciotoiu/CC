package main;

import java.util.*;

public class NFA {
	public NFAState entry;
	public NFAState exit;

	public NFA(NFAState entry, NFAState exit) {
		this.entry = entry;
		this.exit = exit;
	}

	public boolean matches(String str) {
		return entry.matches(str);
	}

	public static final NFA c(char c) {
		NFAState entry = new NFAState();
		NFAState exit = new NFAState();
		exit.isFinal = true;
		entry.addCharEdge(c, exit);
		return new NFA(entry, exit);
	}

	public static final NFA e() {
		NFAState entry = new NFAState();
		NFAState exit = new NFAState();
		entry.addEmptyEdge(exit);
		exit.isFinal = true;
		return new NFA(entry, exit);
	}

	public static final NFA rep(NFA nfa) {
		nfa.exit.addEmptyEdge(nfa.entry);
		nfa.entry.addEmptyEdge(nfa.exit);
		return nfa;
	}

	public static final NFA s(NFA first, NFA second) {
		first.exit.isFinal = false;
		second.exit.isFinal = true;
		first.exit.addEmptyEdge(second.entry);
		return new NFA(first.entry, second.exit);
	}

	public static final NFA or(NFA choice1, NFA choice2) {
		choice1.exit.isFinal = false;
		choice2.exit.isFinal = false;
		NFAState entry = new NFAState();
		NFAState exit = new NFAState();
		exit.isFinal = true;
		entry.addEmptyEdge(choice1.entry);
		entry.addEmptyEdge(choice2.entry);
		choice1.exit.addEmptyEdge(exit);
		choice2.exit.addEmptyEdge(exit);
		return new NFA(entry, exit);
	}

	public static final NFA re(Object o) {
		if (o instanceof NFA)
			return (NFA) o;
		else if (o instanceof Character)
			return c((Character) o);
		else if (o instanceof String)
			return fromString((String) o);
		else {
			throw new RuntimeException("bad regexp");
		}
	}

//	public static final NFA or(String rexps[]) {
//		NFA exp = rexps[0];
//		for (int i = 1; i < rexps.length; i++) {
//			exp = or(exp, re(rexps[i]));
//		}
//		return exp;
//	}

	public static final NFA s(Object... rexps) {
		NFA exp = e();
		for (int i = 0; i < rexps.length; i++) {
			exp = s(exp, re(rexps[i]));
		}
		return exp;
	}

	public static final NFA fromString(String str) {
		if (str.length() == 0)
			return e();
		else
			return s(re(str.charAt(0)), fromString(str.substring(1)));
	}

	public static void main(String[] args) {
		NFA pat = s(rep(or("foo", "bar")), "");
		String[] strings = { "foo", "bar", "foobar", "farboo", "boofar", "barfoo", "foofoobarfooX", "foofoobarfoo", };
		for (String s : strings) {
			System.out.println(s + "\t:\t" + pat.matches(s));
		}
	}
}